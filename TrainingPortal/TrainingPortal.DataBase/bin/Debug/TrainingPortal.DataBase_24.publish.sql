/*
Deployment script for TrainingPortal

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "TrainingPortal"
:setvar DefaultFilePrefix "TrainingPortal"
:setvar DefaultDataPath "C:\Users\anabi\AppData\Local\Microsoft\VisualStudio\SSDT"
:setvar DefaultLogPath "C:\Users\anabi\AppData\Local\Microsoft\VisualStudio\SSDT"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [dbo].[AddRole]...';


GO
CREATE PROCEDURE [dbo].[AddRole]
	@id INT OUTPUT,
	@name NVARCHAR(50)
AS
	INSERT INTO [Role] VALUES(@name)
	SELECT @id = SCOPE_IDENTITY()
RETURN 0
GO
PRINT N'Creating [dbo].[AddUser]...';


GO
CREATE PROCEDURE [dbo].[AddUser]
	@id INT OUTPUT,
	@name NVARCHAR(50),
	@email NVARCHAR(50),
	@passwordHash NVARCHAR(MAX)
AS
	INSERT INTO [User] VALUES(@name, @email, @passwordHash)
	SELECT @id = SCOPE_IDENTITY()
RETURN 0
GO
PRINT N'Creating [dbo].[AddUserToRole]...';


GO
CREATE PROCEDURE [dbo].[AddUserToRole]
	@userId INT,
	@roleId INT
AS
	INSERT INTO [UserRole] VALUES(@userId, @roleId)
RETURN 0
GO
PRINT N'Creating [dbo].[DeleteUser]...';


GO
CREATE PROCEDURE [dbo].[DeleteUser]
	@id INT OUTPUT
AS
	DELETE FROM [User] WHERE Id = @id
RETURN 0
GO
PRINT N'Creating [dbo].[DeleteUserFromRole]...';


GO
CREATE PROCEDURE [dbo].[DeleteUserFromRole]
	@userId INT,
	@roleName NVARCHAR(50)
AS
	DELETE FROM [UserRole] WHERE UserId = @userId AND RoleId = (SELECT Id FROM Role WHERE Name = @roleName);
RETURN 0
GO
PRINT N'Creating [dbo].[GetRole]...';


GO
CREATE PROCEDURE [dbo].[GetRole]
	@name NVARCHAR(50) = NULL OUTPUT,
	@id int = NULL OUTPUT
AS
	SELECT @id = [User].Id, @name = [User].Name FROM [User]
	WHERE ((@name IS NULL) OR (Name = @name)) AND ((@id IS NULL) OR (Id = @id))
RETURN 0
GO
PRINT N'Creating [dbo].[GetUser]...';


GO
CREATE PROCEDURE [dbo].[GetUser]
	@email NVARCHAR(50) = NULL OUTPUT,
	@name NVARCHAR(50) = NULL OUTPUT,
	@passwordHash NVARCHAR(MAX) = NULL OUTPUT,
	@id int = NULL OUTPUT
AS
	SELECT @id = [User].Id, @email = [User].Email, @name = [User].Name, @passwordHash = [User].PasswordHash FROM [User]
	WHERE ((@email IS NULL) OR (Email = @email)) AND ((@name IS NULL) OR (Name = @name)) AND ((@id IS NULL) OR (Id = @id))
RETURN 0
GO
PRINT N'Creating [dbo].[GetUserRoles]...';


GO
CREATE PROCEDURE [dbo].[GetUserRoles]
	@userId INT
AS
	SELECT * FROM UserRole WHERE UserId = @userId
RETURN 0
GO
PRINT N'Creating [dbo].[IsUserInRole]...';


GO
CREATE PROCEDURE [dbo].[IsUserInRole]
	@userId INT,
	@roleName NVARCHAR(50)
AS
	DECLARE @isInRole INT;
	SET @isInRole = 0;
	IF (EXISTS(SELECT * FROM UserRole WHERE UserId = @userId AND RoleId = (SELECT Id FROM Role WHERE Name = @roleName)))
	BEGIN
		SET @isInRole = 1;
	END;
RETURN @isInRole
GO
PRINT N'Creating [dbo].[UpdateUser]...';


GO
CREATE PROCEDURE [dbo].[UpdateUser]
    @id int,
    @email nvarchar(50) = NULL,
    @name nvarchar(50) = NULL,
    @passwordHash nvarchar(MAX) = NULL
AS
BEGIN
    UPDATE [User]
    SET Email=ISNULL(@email,Email), 
        Name=ISNULL(@name,Name), 
        PasswordHash=ISNULL(@passwordHash, PasswordHash)
    WHERE id=@id
END
GO
PRINT N'Update complete.';


GO
