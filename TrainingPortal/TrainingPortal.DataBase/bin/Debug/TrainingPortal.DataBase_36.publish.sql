/*
Deployment script for TrainingPortal

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "TrainingPortal"
:setvar DefaultFilePrefix "TrainingPortal"
:setvar DefaultDataPath "C:\Users\anabi\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"
:setvar DefaultLogPath "C:\Users\anabi\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[Course]...';


GO
CREATE TABLE [dbo].[Course] (
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [Name]        NVARCHAR (50)  NOT NULL,
    [Description] NVARCHAR (MAX) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[CourseForUser]...';


GO
CREATE TABLE [dbo].[CourseForUser] (
    [Id]       INT NOT NULL,
    [UserId]   INT NOT NULL,
    [CourseId] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Role]...';


GO
CREATE TABLE [dbo].[Role] (
    [Id]   INT           IDENTITY (1, 1) NOT NULL,
    [Name] NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[User]...';


GO
CREATE TABLE [dbo].[User] (
    [Id]           INT            IDENTITY (1, 1) NOT NULL,
    [Name]         NVARCHAR (50)  NOT NULL,
    [Email]        NVARCHAR (50)  NOT NULL,
    [PasswordHash] NVARCHAR (MAX) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC),
    UNIQUE NONCLUSTERED ([Email] ASC)
);


GO
PRINT N'Creating [dbo].[User].[IX_Email]...';


GO
CREATE NONCLUSTERED INDEX [IX_Email]
    ON [dbo].[User]([Email] ASC);


GO
PRINT N'Creating [dbo].[UserRole]...';


GO
CREATE TABLE [dbo].[UserRole] (
    [UserId] INT NOT NULL,
    [RoleId] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([UserId] ASC, [RoleId] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[CourseForUser]...';


GO
ALTER TABLE [dbo].[CourseForUser]
    ADD FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[CourseForUser]...';


GO
ALTER TABLE [dbo].[CourseForUser]
    ADD FOREIGN KEY ([CourseId]) REFERENCES [dbo].[Course] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[UserRole]...';


GO
ALTER TABLE [dbo].[UserRole]
    ADD FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[UserRole]...';


GO
ALTER TABLE [dbo].[UserRole]
    ADD FOREIGN KEY ([RoleId]) REFERENCES [dbo].[Role] ([Id]);


GO
PRINT N'Creating [dbo].[AddCourse]...';


GO
CREATE PROCEDURE [dbo].[AddCourse]
	@name NVARCHAR(50),
	@description NVARCHAR(MAX)
AS
	INSERT INTO [Course] VALUES(@name, @description)
RETURN 0
GO
PRINT N'Creating [dbo].[AddRole]...';


GO
CREATE PROCEDURE [dbo].[AddRole]
	@id INT OUTPUT,
	@name NVARCHAR(50)
AS
	INSERT INTO [Role] VALUES(@name)
	SELECT @id = SCOPE_IDENTITY()
RETURN 0
GO
PRINT N'Creating [dbo].[AddUser]...';


GO
CREATE PROCEDURE [dbo].[AddUser]
	@id INT OUTPUT,
	@name NVARCHAR(50),
	@email NVARCHAR(50),
	@passwordHash NVARCHAR(MAX)
AS
	INSERT INTO [User] VALUES(@name, @email, @passwordHash)
	SELECT @id = SCOPE_IDENTITY()
RETURN 0
GO
PRINT N'Creating [dbo].[AddUserToRole]...';


GO
CREATE PROCEDURE [dbo].[AddUserToRole]
	@userId INT,
	@roleName NVARCHAR(50)
AS
	INSERT INTO [UserRole] VALUES(@userId, (SELECT Id FROM Role WHERE Name = @roleName))
RETURN 0
GO
PRINT N'Creating [dbo].[DeleteCourse]...';


GO
CREATE PROCEDURE [dbo].[DeleteCourse]
	@id INT
AS
	DELETE FROM [Course] WHERE Id = @id
RETURN 0
GO
PRINT N'Creating [dbo].[DeleteRole]...';


GO
CREATE PROCEDURE [dbo].[DeleteRole]
	@id INT OUTPUT
AS
	DELETE FROM [Role] WHERE Id = @id
RETURN 0
GO
PRINT N'Creating [dbo].[DeleteUser]...';


GO
CREATE PROCEDURE [dbo].[DeleteUser]
	@id INT OUTPUT
AS
	DELETE FROM [User] WHERE Id = @id
RETURN 0
GO
PRINT N'Creating [dbo].[DeleteUserFromRole]...';


GO
CREATE PROCEDURE [dbo].[DeleteUserFromRole]
	@userId INT,
	@roleName NVARCHAR(50)
AS
	DELETE FROM [UserRole] WHERE UserId = @userId AND RoleId = (SELECT Id FROM Role WHERE Name = @roleName);
RETURN 0
GO
PRINT N'Creating [dbo].[GetCourse]...';


GO
CREATE PROCEDURE [dbo].[GetCourse]
	@id INT
AS
	SELECT TOP 1 * FROM [Course] WHERE Id = @id
RETURN 0
GO
PRINT N'Creating [dbo].[GetCourses]...';


GO
CREATE PROCEDURE [dbo].[GetCourses]
	@id int = NULL,
	@name NVARCHAR(50) = NULL,
	@description NVARCHAR(MAX) = NULL
AS
	SELECT * FROM [Course]
RETURN 0
GO
PRINT N'Creating [dbo].[GetRole]...';


GO
CREATE PROCEDURE [dbo].[GetRole]
	@name NVARCHAR(50) = NULL OUTPUT,
	@id int = NULL OUTPUT
AS
	SELECT @id = [Role].Id, @name = [Role].Name FROM [Role]
	WHERE ((@name IS NULL) OR (Name = @name)) AND ((@id IS NULL) OR (Id = @id))
RETURN 0
GO
PRINT N'Creating [dbo].[GetRoles]...';


GO
CREATE PROCEDURE [dbo].[GetRoles]
AS
	SELECT * FROM [Role]
RETURN 0
GO
PRINT N'Creating [dbo].[GetUser]...';


GO
CREATE PROCEDURE [dbo].[GetUser]
	@email NVARCHAR(50) = NULL OUTPUT,
	@name NVARCHAR(50) = NULL OUTPUT,
	@passwordHash NVARCHAR(MAX) = NULL OUTPUT,
	@id int = NULL OUTPUT
AS
	SELECT @id = [User].Id, @email = [User].Email, @name = [User].Name, @passwordHash = [User].PasswordHash FROM [User]
	WHERE ((@email IS NULL) OR (Email = @email)) AND ((@name IS NULL) OR (Name = @name)) AND ((@id IS NULL) OR (Id = @id))
RETURN 0
GO
PRINT N'Creating [dbo].[GetUserRoles]...';


GO
CREATE PROCEDURE [dbo].[GetUserRoles]
	@userId INT
AS
	SELECT Name FROM Role WHERE Id IN (SELECT RoleId FROM UserRole WHERE UserId = @userId)
RETURN 0
GO
PRINT N'Creating [dbo].[GetUsers]...';


GO
CREATE PROCEDURE [dbo].[GetUsers]
AS
	SELECT * FROM [User]
RETURN 0
GO
PRINT N'Creating [dbo].[IsUserInRole]...';


GO
CREATE PROCEDURE [dbo].[IsUserInRole]
	@userId INT,
	@roleName NVARCHAR(50)
AS
	SELECT * FROM UserRole WHERE UserId = @userId AND RoleId = (SELECT Id FROM Role WHERE Name = @roleName)
RETURN 0
GO
PRINT N'Creating [dbo].[UpdateCourse]...';


GO
CREATE PROCEDURE [dbo].[UpdateCourse]
    @id INT,
    @name NVARCHAR(50) = NULL,
    @description NVARCHAR(MAX) = NULL
AS
BEGIN
    UPDATE [Course] SET Description=ISNULL(@description,Description), Name=ISNULL(@name,Name)
	WHERE id=@id
END
GO
PRINT N'Creating [dbo].[UpdateRole]...';


GO
CREATE PROCEDURE [dbo].[UpdateRole]
    @id int,
    @name nvarchar(50) = NULL
AS
BEGIN
    UPDATE [Role] SET Name=ISNULL(@name, Name) WHERE id=@id
END
GO
PRINT N'Creating [dbo].[UpdateUser]...';


GO
CREATE PROCEDURE [dbo].[UpdateUser]
    @id int,
    @email nvarchar(50) = NULL,
    @name nvarchar(50) = NULL,
    @passwordHash nvarchar(MAX) = NULL
AS
BEGIN
    UPDATE [User] SET Email=ISNULL(@email,Email), Name=ISNULL(@name,Name), PasswordHash=ISNULL(@passwordHash, PasswordHash)
	WHERE id=@id
END
GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
